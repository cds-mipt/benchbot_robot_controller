#!/usr/bin/env python
#
# This node takes a ground truth pose publishing system and converts it to the
# noisy "odom -> base_link" + "map -> odom" corrections when localisation
# approach typical in robotics.
#
# "map -> odom" will be the start pose if 'ground_truth' is False, otherwise it
# will be the delta between our generated noisy "odom -> base_link" link and
# the true pose.

import rospy

from nav_msgs.msg import Odometry


class PoseNoisifier(object):

    def __init__(self):
        self.in_topic_odom = rospy.get_param("in_topic_odom", "/odom_raw")
        self.in_frame_odom = rospy.get_param("in_frame_odom", "odom_raw")
        self.in_frame_robot = rospy.get_param("in_frame_robot",
                                              "base_link_raw")

        self.out_topic_odom = rospy.get_param("out_topic_odom", "/odom_raw")
        self.out_frame_odom = rospy.get_param("out_frame_odom", "odom")
        self.out_frame_robot = rospy.get_param("out_frame_robot", "base_link")

        self.ground_truth = rospy.get_param("ground_truth", False)

        self.start_pose = rospy.get_param("start_pose",
                                          "1,0,0,0,0,0,0")  # w,x,y,z,X,Y,Z

        self._pub_odom = rospy.Publisher(self.out_topic_odom,
                                         Odometry,
                                         queue_size=1)
        self._sub_odom = rospy.Subscriber(self.in_topic_odom, Odometry,
                                          self.pub)

    def pub(self, odom_msg):
        print("tic")
        pass


if __name__ == '__main__':
    rospy.init_node("noisify_pose")

    pn = PoseNoisifier()

    rospy.spin()
